import numpy as np

# arr = np.array([1, 2, 3])
# for x in arr:
#     print(x)

# # ----------------------------
# # Iterating 2-D Arrays
# arr = np.array(
#     [
#         [1, 2, 3], [4, 5, 6]
#     ]
# )
# for x in arr:
#     print(x)

# # ----------------------------
# # Iterating 3-D Arrays
# arr = np.array(
#     [
#         [
#             [1, 2, 3], [4, 5, 6]
#         ],
#         [
#             [7, 8, 9], [10, 11, 12]
#         ]
#     ]
# )
# for x in arr:
#     print(x)

# # ----------------------------
# # To return the actual values, the scalars, we have to iterate the arrays in each dimension.
# arr = np.array([[1, 2, 3], [4, 5, 6]])

# for x in arr:
#     for y in x:
#         print(y)

# # Iterating Arrays Using nditer()
# arr = np.array(
#     [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
# )
# for x in np.nditer(arr):
#     print(x, end=" ")

# # Iterating Array With Different Data Types
# arr = np.array([1, 2, 3])

# for x in np.nditer(arr, flags=['buffered'], op_dtypes=['S']):
#     print(x, end="- ")

# # Iterating Array With Different Data Types
# arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

# for x in np.nditer(arr[:, ::2]):
#     print(x)

# Enumerated Iteration Using ndenumerate()
import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

for idx, x in np.ndenumerate(arr):
    print(idx, x)
